{
  "articles": [
    {
      "path": "A32.html",
      "title": "Actividad 3.2",
      "description": "Implementación patrón Factory Method\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nObjetivos de aprendizaje (contenido)\r\nObjetivos de proceso (soft skills)\r\nEntrega\r\nActividades\r\n\r\nObjetivos de aprendizaje (contenido)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nComprender la solución conceptual del patrón Factory Method\r\nImplementar el patrón Factory Method en un caso particular\r\nObjetivos de proceso (soft skills)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nEvaluar e interpretar información para adoptar a un contexto determinado (Information processing)\r\nEntrega\r\nSe entrega de forma individual en el Aula Virtual. Se deberá subir un documento en formato PDF. Puedes incluir un link en el propio documento al código creado en un repositorio público.\r\nFecha límite: 11 octubre, a las 12:00\r\nActividades\r\nCompleta la codificación del Factory Method para el ejemplo de KnifeStore, incluyendo las subclases USKnifeStore y EuropeKnifeStore . La tienda americana produce SteakKnife y ChefKnife. La tienda europea produce subtipos nuevos de productos: EuropeChefKnife y EuropeSteakKnife. Puedes copiar el código de las clases resultantes en un documento o bien copiar el link a un repositorio de código (como github) en abierto.\r\nCrea el diagrama de clases resultante para tu implementación según la estructura conceptual del Factory Method.\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:47+02:00"
    },
    {
      "path": "HW1.html",
      "title": "HW1",
      "description": "Preparativos proyecto y exploración características de la arquitectura\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nObjetivos de aprendizaje (contenido)\r\nObjetivos de proceso (soft skills)\r\nEntrega\r\nActividades\r\n\r\n\r\n\r\nObjetivos de aprendizaje (contenido)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nEvaluar las características de la arquitectura a partir de requisitos explícitos\r\nEvaluar las características de la arquitectura a partir de requisitos implícitos\r\nSintetizar las características más relevantes\r\nObjetivos de proceso (soft skills)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nEstablecerse en grupos de trabajos y asignar responsabilidades\r\nEntrega\r\nSe entrega de forma individual la Actividad 2 en el Aula Virtual. Se deberá subir un documento en formato PDF de extensión máxima de 1 página.\r\nFecha límite: 22 sep, 23:59\r\nActividades\r\nLee con atención el proyecto común. Durante estos días iniciales, es muy importante resolver cualquier duda con el profesorado y realizar una planificación temporal del proyecto, evaluando las actividades requeridas en cada una de las entregas establecidas. Por supuesto, hay que establcerse en grupso de trabajo. Encuentra a tus compañeros/as!\r\nArquitectura kata: Sillicon Sandwiches\r\nDescripción: Una franquicia de tiendas de sándwiches nacional quiere habilitar los pedidos en línea (además de su actual servicio de llamada).\r\nUsuarios: Miles, quizás millones al día\r\nRequisitos\r\nLos usuarios realizarán su pedido, luego se les dará un tiempo para recoger su sándwich e instrucciones para llegar a la tienda (que debe integrarse con varios servicios de mapas externos que incluyen información de tráfico).\r\nOfrece promociones diarias nacionales.\r\nOfrece promociones diarias locales.\r\nAcepta pago en línea, en persona o a la entrega.\r\n\r\nContexto:\r\nLa empresa matriz tiene planes a corto plazo para expandirse al extranjero.\r\nEl objetivo corporativo es contratar mano de obra barata para maximizar las ganancias.\r\n\r\nPara cada una de las sentencias en usarios, requisitos, y contexto, justifica que características de la arquitectua son importantes. Recuerda, todo en arquitectura es compromiso. Para terminar, como arquitecto/a, indica las 3 características más relevantes para el sistema.\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:48+02:00"
    },
    {
      "path": "HW2.html",
      "title": "HW2",
      "description": "Reflexión personal de las sesiones de arquitectura de software\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nObjetivos de aprendizaje (contenido)\r\nObjetivos de proceso (soft skills)\r\nEntrega\r\nActividades\r\n\r\n\r\n\r\nObjetivos de aprendizaje (contenido)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\n\r\nObjetivos de proceso (soft skills)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nSer consciente de los procesos de aprendizaje que realizas (Metacognition)\r\nReflexionar sobre la calidad del trabajo realizado y dudas pendientes (Metacognition)\r\nEntrega\r\nSe entrega de forma individual en el Aula Virtual. Se deberá subir un documento en formato PDF.\r\nFecha límite: 29 sep, 23:59\r\nActividades\r\nTras terminar las dos sesiones de teoría relativas a la arquitectura de software, donde hemos visto algunos conceptos básicos de arquitectura, como las dimensiones de una arquitecture software (caracteristicas, y estructura/estilo), el rol de un arquitecto de software vs diseñador/desarrollador, así como las tareas que lleva a cabo un arquitectro, ahora nos detenemos un momento para valorar lo que hemos aprendido, las dudas que aún quedan, y para qué lo hemos aprendido. Todas las preguntas siguientes hacen referencia únicamente a las dos sesiones de teoría TE1 y TE2:\r\n¿Cuál crees que ha sido el objetivo(s) de aprendizaje de estas dos sesiones?\r\n¿Qué es lo que mejor has entendido de lo que has trabajo, aquello que crees que tienes bastante claro?\r\n¿Cualés son las cosas más importantes (para ti) que has aprendido en las dos sesiones de teoría?\r\n¿Que dudas te han quedado? ¿Qué es aquello que te sigue causando confusión y te gustaría aclarar?\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:49+02:00"
    },
    {
      "path": "HW4.html",
      "title": "HW4",
      "description": "Implementación patrón Decorator\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nObjetivos de aprendizaje (contenido)\r\nObjetivos de proceso (soft skills)\r\nEntrega\r\nActividades\r\n\r\nObjetivos de aprendizaje (contenido)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nComprender la solución conceptual del patrón Decorator\r\nAnalizar la combinación de dos patrones como solución a un caso particular\r\nImplementar el patrón Decorator en combinación con el patrón Composite en un caso particular\r\nObjetivos de proceso (soft skills)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nEvaluar e interpretar información para adoptarla a un contexto determinado (Information processing)\r\nTransmitir información compresible a través de materiales escritos (Written communication).\r\nReflexionar sobre los errores cometidos (Metacognition)\r\nEntrega\r\nSe entrega de forma individual en el Aula Virtual. Se deberá subir un documento en formato PDF. Puedes incluir un link en el propio documento al código creado se encuentra en un repositorio público.\r\nFecha límite: 20 oct, 23:59\r\nActividades\r\nLos patrones Composite y Decorator tienen estructuras similares ya que ambos se basan en la recursividad para organizar un número de objetos. Un Decorator es como un Composite pero sólo tiene un componente hijo. Sin embargo, los dos patrones pueden colaborar para, por ejemplo, extender el comportamiento de un objeto específico del árbol Composite con un Decorator. Y de eso va esta actividad: implementar una solución que combine Composite y Decorador.\r\nPartimos de la implementación ya realizada de la aplicación PLayList con el patrón Composite. La solución oficial está en el AV (Recursos adicionales). Ahora, lo que queremos hacer es aplicar el patrón Decorator sobre una canción (hojas) para reproducir una canción en suporte “vinilo” o en “mp4” (decoradores concretos). Un extracto de la salida que produce un cliente, muy similar a DemoComposite.java , se muestra abajo. Observa como al utilizar un decorador u otro sobre una canción se añade el texto “On vinyl” o “On MP4” respectivamente. No es necesario que todas las canciones estén “decoradas”.\r\n\r\n—–My Songs—–\r\n—–Sabina's hits—–\r\nEscuchando…Princesa BY Joaquín Sabina\r\nON vinyl\r\n—–Sabina's hits—–\r\nEscuchando…Calle melancolía BY Joaquín Sabina\r\n—–My Songs—–\r\n—–Manolo Garcia's hits—–\r\nEscuchando…Pájaros de barro BY Manolo García\r\nON MP4\r\n\r\nPrimero, reflexiona y explica qué diferencia hay entre la solución de tu equipo y la solución oficial (en el AV) para la aplicación PlayList con el patrón Composite vista en la sesión TE5, indicando si son errores o no. En el caso de errores, explica por qué los has cometido (o mejor dicho: tu equipo) y por qué no los volverás (ni los demás miembros de tu equipo) a cometer.\r\nCrea el diagrama de clases resultantes para tu implemetación que combine el patrón Composite y Decorator .\r\nImplementa las clases necesarias (3 + la clase cliente) para aplicar el patrón Decorator a los nodos hoja (Song) para la nueva versión de la aplicación PLayList.\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:50+02:00"
    },
    {
      "path": "HW5.html",
      "title": "HW5",
      "description": "Implementación patrón Strategy\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nObjetivos de aprendizaje (contenido)\r\nObjetivos de proceso (soft skills)\r\nEntrega\r\nActividades\r\n\r\nObjetivos de aprendizaje (contenido)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nComprender la solución conceptual del patrón Strategy\r\nAnalizar la combinación de dos Strategies como solución conceptual\r\nImplementar dos Strategies en un caso particular\r\nObjetivos de proceso (soft skills)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nEvaluar e interpretar información para adoptarla a un contexto determinado (Information processing)\r\nTransmitir información compresible a través de materiales escritos (Written communication).\r\nEntrega\r\nSe entrega de forma individual en el Aula Virtual. Se deberá subir un documento en formato PDF. Puedes incluir un link en el propio documento al código creado si encuentra en un repositorio público.\r\nFecha límite: 3 nov, 23:59\r\nActividades\r\nLa desarrolladora-jefe requiere de un nuevo simulador que facilite el testeo de una batería de clasificadores de Machine Learning: K-NN, K-means y Self-Organizing Map (SOM). Los tres clasificadores se basan en métricas de distancia para la predicción. Para mejorar la fiabilidad de las simulaciones, se decide utilizar dos métricas de distancia: Euclidean y Manhattan. Como resultado, el nuevo simulador admite hasta 6 combinaciones, ya que cada clasificador puede utilizar cualquiera de las 2 métricas para el cálculo de la distancia entre el nuevo dato y el conjunto de datos de entrenamiento. Vamos a realizar el simulador de forma progresiva.\r\nConsidera inicialmente la batería de tres clasificadores. Dibuja el diagrama UML para aplicar el patrón Strategy al simulador que estamos implementando.\r\nImplementa la interfaces y clases necesarias. La clase cliente (DemoStrategySimple.java) se incluye como ayuda, así como la salida por consola.\r\npublic class DemoStrategySimple {\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(\"--- KNN ---\");\r\n        ContextSimple context = new ContextSimple(new ClassifierKnn());\r\n        context.run();\r\n\r\n        System.out.println(\"--- K-means ---\");\r\n        context.setClassifierStrategy(new ClassifierKmeans());\r\n        context.run();\r\n\r\n        System.out.println(\"--- SOM ---\");\r\n        context.setClassifierStrategy(new ClassifierSOM());\r\n        context.run();\r\n    }\r\n}\r\n\r\n--- KNN ---\r\nClassifierKnn executed\r\n--- K-means ---       \r\nClassifierKmeans executed\r\n--- SOM ---\r\nClassifierSOM executed\r\nExtiende el simulador considerando ahora que las métricas de la distancia (Manhattan, Euclidea) se implementan también con el patron Strategy. Dibuja un diagrama UML ampliando el anterior (Actividad 1) con la composicion de dos estrategias.\r\nImplementa ahora la nueva interfaz y clases necesarias. Modifica, si fuera necesaria, alguna de las clases creadas en la Actividad 2. La implementación completa debe permitir que el simulador pueda combinar dos estrategias dinámicamente para ejecutar, por ejemplo, KNN con la distancia euclidea y luego ejecutar KNN con la distancia Manhattan. Se muestra la salida por consola de la ejecución de un programa cliente.\r\n--- KNN with Euclidean distance---\r\nDistanceEuclidean computed\r\nClassifierKnn executed\r\n--- KNN with Manhattan distance---\r\nDistanceManhattan  computed\r\nClassifierKnn executed\r\n--- K-means with Manhattan distance ---\r\nDistanceManhattan  computed\r\nClassifierKmeans executed\r\n--- SOM  with Euclidean distance ---\r\nDistanceEuclidean computed\r\nClassifierSOM executed\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:51+02:00"
    },
    {
      "path": "HW6.html",
      "title": "HW6",
      "description": "Implementación patrón Command\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nObjetivos de aprendizaje (contenido)\r\nObjetivos de proceso (soft skills)\r\nEntrega\r\nActividades\r\n\r\nObjetivos de aprendizaje (contenido)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nComprender la solución conceptual del patrón Command\r\nAnalizar otro tipo de usos o propósitos del patrón Command\r\nImplementar propósitos variados del patrón Command en una misma solución\r\nObjetivos de proceso (soft skills)\r\nDespués de completar esta actividad, los alumnos deberían poder:\r\nEvaluar e interpretar información para adoptarla a un contexto determinado (Information processing)\r\nTransmitir información compresible a través de materiales escritos (Written communication).\r\nEntrega\r\nSe entrega de forma individual en el Aula Virtual. Se deberá subir un documento en formato PDF. Puedes incluir un link en el propio documento al código creado si encuentra en un repositorio público.\r\nFecha límite: 10 nov, 23:59\r\nActividades\r\nLas actividades propuesta a continuación son una continuación de la actividad POGIL para el patrón Command realizada en la sesión TE8. Todos los miembros de cada equipo deberán tener el código desarrollado en esa actividad POGIL. A partir de ahora, las siguentes actividades se realizan individualmente.\r\nEl funcionamiento real del robot BeeBot no funciona de forma interactiva, es decir, los comandos asociados al presionar cada una de las teclas naranjas no se ejecutan inmediatamente (¡eso desesperaría al niño/a!), sino que se almacena la secuencia de comandos hasta que se presiona la tecla especial “GO” de color verde. Este es el objetivo principal de este HW. Lo implementaremos de forma progresiva.\r\nComo primer paso, idea e implementa una forma de mantener la secuencia de comandos sin ejecutarlos inmediatamente. Deberás añadir una clase que soporte el histórico de comandos y modificar el código de algunas clases existente para que cada tecla presionada no conlleve la ejecución del comando asociado sino que lo almacena en una estructura de datos adecuada.\r\nAhora que tienes la secuencia de comandos (teclas presionadas) almacenada, idea e implementa una solución para recrear el otro botón especial de BeeBot que permite “borrar” la última (y solo la última) tecla naranja presionada.\r\nAhora sí que está todo listo para que implementes el comportamiento real del botón especial verde “GO” del BeeBot que ejecuta la secuencia ordenada de teclas naranjas (comandos) almacenados.\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:52+02:00"
    },
    {
      "path": "index.html",
      "title": "EI1039 - Dise&ntilde;o de software",
      "description": "Ampliación de la Guía Docente EI1039 para el curso académico 2023/2024\n",
      "author": [
        {
          "name": "Carlos Granell",
          "url": "http://carlosgranell.eu"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nContacto\r\nObjetivo y resultados de aprendizaje\r\nMétodo de instrucción\r\nMateriales y contenido\r\nMétodos de evaluación\r\nCódigo de Conducta\r\n\r\n\r\n\r\n\r\nContacto\r\nCarlos Granell  Office UB1520DD, Espaitec2, 5th floor  Universitat Jaume I, Spain\r\nTutorías (virtuales).\r\nHorarios y localización de las clases teóricas (TE), seminarios (SE) y laboratorio (LA).\r\nObjetivo y resultados de aprendizaje\r\nSegún el SIA “la asignatura Diseño de Software se imparte en el primer semestre de cuarto curso del grado en Ingeniería Informática de la Universitat Jaume I, como parte del itinerario de Ingeniería del Software. El objetivo de esta asignatura es proporcionar al alumnado conocimientos y habilidades sobre las distintas etapas del diseño del software dentro del proceso de desarrollo.”\r\nAl final de la EI1039, deberías ser capaz de:\r\nComparar las distintas estrategias que se pueden utilizar en el diseño de un sistema software.\r\nSeleccionar, aplicar y evaluar patrones de arquitectura y diseño adecuados a la resolución de un determinado problema de desarrollo del software.\r\nDiseñar y evaluar la interfaz de usuario utilizando principios y técnicas propias de la interacción persona-computador.\r\nTan importante como los resultados de aprendizaje listados antes son las competencias blandas (o soft skills) tales como la habilidad de comunicación, trabajo en equipo, capacidad de sintesis de información, capacidad de toma de decisiones y resolución de conflictos, gestión del tiempo o liderazgo. Trabajaremos estas competencias blandas a lo largo del curso pues, lo creas o no, son aspectos vitales en el día a día de un arquitecto/a de software.\r\nArquitectura software, patrones de diseño, comunicación, trabajo en equipo, …. Suena bien, ¿no? No menos importante, espero que te diviertas en el aprendizaje y comprensión del contenido de la asignatura para el diseño y desarrollo de aplicaciones avanzadas.\r\nMétodo de instrucción\r\n\r\nTenemos millones de neuronas. que “hacen amigos fácilmente”. Las neuronas se conectan con otras neuronas con cada nueva experiencia que tenemos (nuevas emociones, pensamientos, acciones. etc.) formando redes. Las redes al principio son débiles., pero cada vez que repetimos la experiencia o acción, la red se consolida y se hace más fuerte. Cuando aprendemos, nuestro cerebro cambia por la formación de nuevas conexiones entre neuronas.\r\nCuando reflexionamos y aplicamos cierto conocimento a contextos nuevos, lo comprendemos más profundamente, provocando que la red sea más densa y tenga conexiones con otras redes. La differencia entre la red de un principiante y la de un experto radica justamente en el número y densidad de conexiones. Cuanto más interconexiones, mayor comprensión.\r\n\r\n\r\n¿Te has preguntado alguna vez qué pasa en tu cerebro cuando aprendes? (Lang 2016)\r\nSi esperas presentaciones largas por mi parte todos los viernes por la tarde, entonces creo que te has matriculado de la asignatura equivocada. Hay evidencia científica de sobra que demuestra una y otra vez que los métodos de aprendizaje activo (por activo me refiero a todos, tanto dentro como fuera de clase) son mucho más efectivos que escucharme y tomar apuntes de forma pasiva. Vale, es cierto que a veces son necesarias presentaciones breves aclaratorias; pero tú debes ser el protagonista (y no yo) de tu propio proceso de aprendizaje para alcanzar los resultados esperados con éxito. Por lo tanto, esta asignatura mezcla diversas estrategias de aprendizaje, algunas más tradicionales como presentaciones por mi parte cuando sea necesario combinadas con estrategias de apredizaje colaborativas y activas para trabajo en grupo, exploración y aplicación de conceptos, y competencias de proceso (o process skills), como por ejemplo Flipped Classroom (lecturas y ejercicios básicos fuera del aula que requieren competencias cognitivas bajas, con análisis y resolución de problemas en aula que requiren competencias cognitivas altas).\r\nTaxonomía de BloomPara que te hagas una idea, una semana típica de clase de teoría podría ser así:\r\nHasta el miércoles (a las 12:00): Fecha límite para entregar las actividades previas de forma individual en el Aula Virtual.\r\nViernes (en aula): Comentamos las actividades previas, junto con mini-presentaciones y actividades en clase.\r\nLa asignatura también consta de sesiones de seminarios (SE) donde explorarás temas adicionales al diseño de patrones, como arquitectura de software e interfaces de usuario, relacionados con el proyecto común a desarrollar.\r\nSeminario 1 (29 septiembre) - MVC y variantes + interfaces de usuario\r\nSeminario 2 (13 octubre) - Caso de estudio: Software architecture patterns\r\nSeminario 3 (26-27 octubre) - Conjunto con EI1048. Relacionado con proyecto común\r\nSeminario 4 (23-24 noviembre) - Conjunto con EI1048. Relacionado con proyecto común\r\nSeminario 5 (1 diciembre) - Comunicación oral del proyecto\r\nLas asignaturas EI1039 (Diseño de software) y EI1048 (Paradigmas de Software) están muy relacionadas, ya que son dos caras de la misma moneda a la hora de diseñar y desarrollar aplicaciones avanzadas. Para facilitar el aprendizaje de las competencias de ambas asignaturas, el profesorado nos hemos organizado para proponerte un proyecto común que viene detallado en un documento separado colgado en el Aula Virtual de las dos asignaturas. Las clases de laboratorio (LA) de la EI1039 son de trabajo (en grupo) para la consecución del proyecto común.\r\nMateriales y contenido\r\nLos materiales del curso están disponibles en el Aula Virtual. Las actividades previas a título indivual se entregan a través de las tareas correspondientes en el Aula Virtual de la asignatura. Voy a utilizar el Aula Virtual para proporcionarte feedback sobre las actividades propuestas, para anuncios de la asignatura y, en definitiva, para cualquier tipo de comunicación oficial. Agradecería enormemente que todas las comunicaciones entre nosotros relativas a la asignatura fueran canalizadas a través del Aula Virtual, y no a través de mi correo personal.\r\nMétodos de evaluación\r\nLa participación en clase es fundamental. Las actividades propuestas en aula invitan al trabajo colaborativo y participativo, fomentado el aprendizaje activo, la discusión y la comunicación. Las actividades previas cuentan un 10%. Es necesario entregarlas todas. Los seminarios computan otro 20% de la nota final, según se desglosa en la tabla abajo. A lo largo del curso se informará con más detalle de la naturaleza de los seminarios evaluables. El desarrollo, entrega y defensa del proyecto común cubre el 70% de la nota.\r\nInstrumentos de evaluación\r\nActividad\r\n\r\nPeso\r\nTipo\r\nInstrumento\r\nActividades previas\r\nIndividual\r\n10%\r\nFormativa / Formadora\r\nCódigo y/o reflexión personal\r\nSeminario 1 y 2\r\nIndividual\r\n10%\r\nFormativa / Formadora\r\nReflexión personal\r\nSeminarios 3 y 4 (con EI1048)\r\nGrupo\r\n10%\r\nFormativa / Formadora\r\nPresentación y discusión\r\nProyecto común (con EI1048)\r\nGrupo\r\n70%\r\nAcreditativa\r\nCódigo, documento escrito, presentación y discusión\r\n\r\nPolítica de entrega tardía/retrasada: Las fechas límite semanales (miércoles mediodía para las activiades previas a clase ) tienen sentido para que pueda evaluar el trabajo y proporcionar feedback rápido en la siguiente clase de teoría (viernes). Por lo tanto, las actividades entregadas con retraso no se aceptarán sin permiso especial o debida justificación.\r\n\r\nCódigo de Conducta\r\nTo ensure a welcoming environment for all, we require everyone participating in the course to conform to the Code of Conduct given below. This code applies to all spaces related to the course including, but not limited to, classroom, seminars, Aula Virtual, emails, shared documents, and code repositories. You can report Code of Conduct violations to Carlos Granell either in person or by e-mail.\r\nWe are dedicated to providing a welcoming and supportive environment for all people, regardless of background or identity. However, we recognize that some groups in our community are subject to historical and ongoing discrimination, and may be vulnerable or disadvantaged. Membership in such a specific group can be on the basis of characteristics such as gender, sexual orientation, disability, physical appearance, body size, race, nationality, sex, color, ethnic or social origin, pregnancy, citizenship, familial status, veteran status, genetic information, religion or belief, political or any other opinion, membership of a national minority, property, birth, age, or choice of text editor. We do not tolerate harassment of participants on the basis of these categories, or for any other reason.\r\nHarassment is any form of behavior intended to exclude, intimidate, or cause discomfort. Because we are a diverse community, we may have different ways of communicating and of understanding the intent behind actions. Therefore we have chosen to prohibit certain forms of behavior in our community, regardless of intent.\r\nProhibited harassing behavior includes but is not limited to:\r\nwritten or verbal comments which have the effect of excluding people on the basis of membership of a specific group listed above;\r\ncausing someone to fear for their safety, such as through stalking, following, or intimidation;\r\nthe display of sexual or violent images;\r\nunwelcome sexual attention;\r\nnon-consensual or unwelcome physical contact;\r\nsustained disruption of talks, events or communications;\r\nincitement to violence, suicide, or self-harm;\r\ncontinuing to initiate interaction (including photography or recording) with someone after being asked to stop; and\r\npublication of private communication without consent.\r\nBehavior not explicitly mentioned above may still constitute harassment. The list above should not be taken as exhaustive but rather as a guide to make it easier to enrich all of us and the communities in which we participate. All interactions should be professional regardless of location: harassment is prohibited whether it occurs on-line or off-line, and the same standards apply to both.\r\nEnforcement of the Code of Conduct will be respectful and not include any harassing behaviors.\r\nThank you for helping make this a welcoming, friendly community for all.\r\nThis code of conduct is a simplification of the CoC for [Reproducible Research workshops at AGILE](%5Bhttps://o2r.info/reproducible-agile/),,) which in turn is based on a CoC for Teaching Tech Together](http://teachtogether.tech/)) by Greg Wilson.]\r\n\r\n\r\n\r\nLang, James M. 2016. Small Teaching. Jossey-Bass. https://www.jamesmlang.com/books.\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:54+02:00"
    },
    {
      "path": "references.html",
      "title": "Referencias",
      "description": "Bibliografía con todas las referencias, tanto si se han incluído como no en los materiales de la asignatura.  \n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\nBass, Len, Paul Clements, and Rick Kazman. 2021. Software Architecture in Practice. Addison-Wesley Professional; 4th Edition.\r\n\r\n\r\nFowler, Martin. 2003. “Who Needs an Architect?” IEEE Software 20 (5): 2–4. https://doi.org/10.1109/MS.2003.1231144.\r\n\r\n\r\nFrancis, Gibin. 2022. “Software Architect — Journey.” Medium. https://gibinfrancis.medium.com/software-architect-journey-ca9398546608.\r\n\r\n\r\nFreeman, Eric, Elisabeth Robson, Bert Bates, and Kathy Sierra. 2004. Head First Design Patterns, 1st Edition. O’Really Media Inc.\r\n\r\n\r\nGamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. 1994. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley.\r\n\r\n\r\nGonzález-Pérez, Alberto, and Miguel Matey-Sanz. 2021. “nativescript-task-dispatcher: A Reactive Android-Based Task Scheduler and Dispatcher.” Zenodo. https://doi.org/10.5281/zenodo.4530103.\r\n\r\n\r\nGonzález-Pérez, Alberto, Miguel Matey-Sanz, Carlos Granell, and Sven Casteleyn. 2022. “Using Mobile Devices as Scientific Measurement Instruments: Reliable Android Task Scheduling.” Pervasive and Mobile Computing 81: 101550. https://doi.org/https://doi.org/10.1016/j.pmcj.2022.101550.\r\n\r\n\r\nLang, James M. 2016. Small Teaching. Jossey-Bass. https://www.jamesmlang.com/books.\r\n\r\n\r\nMartin, Robert. 2002. Agile Software Development: Principles, Patterns, and Practices. Pearson Education, 1st edition. http://blog.cleancoder.com/uncle-bob/2020/10/18/Solid-Relevance.html.\r\n\r\n\r\n———. 2014. “SOLID Principles of Objetc Oriented & AGILE Design (Video).” https://www.youtube.com/watch?v=TMuno5RZNeE.\r\n\r\n\r\n———. 2018. Clean Architecture: A Craftsman’s Guide to Software Structure and Design. Pearson Education, 1st edition. https://www.pearson.com/us/higher-education/program/Martin-Clean-Architecture-A-Craftsman-s-Guide-to-Software-Structure-and-Design/PGM333762.html.\r\n\r\n\r\nMilignton, Sam. 2022. “A Solid Guide to SOLID: Principles.” https://www.baeldung.com/solid-principles.\r\n\r\n\r\nNogueira, Ricardo. 2022. “4+2 Layered Architecture: Separation of Concerns Applied to Software Architecture.” Medium. https://medium.com/@nogueira.cc/4-2-layered-architecture-313329082989.\r\n\r\n\r\nNormand, Eric. 2021. Grokking Simplicity: Taming Complex Software with Functional Thinking. Manning.\r\n\r\n\r\nOloruntoba, Samuel. 2021. “SOLID: The First 5 Principles of Object Oriented Design.” https://www.digitalocean.com/community/conceptual-articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design.\r\n\r\n\r\nRichards, Mark, and Neal Ford. 2020. Fundamentals of Software Architecture, 1st Edition. O’Really Media Inc.\r\n\r\n\r\nRodríguez Pupo, Luis Enrique. 2021. “An Analytics Platform for Integrating and Computing Spatio-Temporal Metrics in Location-Aware Games.” PhD thesis, Universitat Jaume I. Escola de Doctorat. https://doi.org/10.6035/14101.2021.357562.\r\n\r\n\r\nShvets, Alexander. 2019. Sumérgete En Los Patrones de Diseño. Refactoring.Guru. https://refactoring.guru/design-patterns/book.\r\n\r\n\r\nSoysal, Berke. 2022. “SOLID Principles with (Almost) Real-Life Examples in Java.” https://betterprogramming.pub/solid-principles-with-almost-real-life-examples-in-java-b292a4e2c18b.\r\n\r\n\r\nTai, Alan. 2022. “What It Takes to Become a Software Architect.” Medium. https://ayltai.medium.com/what-it-takes-to-become-a-software-architect-fa7788962c8c.\r\n\r\n\r\nWilson, Greg. 2019. Teaching Tech Together: How to Make Lessons That Work and Build a Teaching Community Around It. Taylor & Francis. https://teachtogether.tech/.\r\n\r\n\r\nXie, Y. 2019. Bookdown: Authoring Books and Technical Documents with R Markdown. CRC Press. https://bookdown.org/yihui/bookdown/.\r\n\r\n\r\nXie, Y, JJ Allaire, and G Grolemund. 2018. R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/.\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:56+02:00"
    },
    {
      "path": "SE2.html",
      "title": "SE2",
      "description": "Caso de estudio - Software Architecture patterns\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nIntroducción\r\nObjetivo\r\nMetodología\r\n\r\nIntroducción\r\nEl seminario aborda el caso de estudio de la transición o migración de la arquitectura software de airbnb, a partir de la transcripción de una presentación de Jessica Tai en el QCon Plus (Nov 2021).\r\nObjetivo\r\nArgumentar sobre las ventajas e inconvenientes de patrones de arquitectura software para el caso de estudio\r\nMetodología\r\nEl seminario se articula en formato de debate simplificado entre dos grupos. Los asistentes a cada sesión de seminarios se dividirán aleatoriamente en dos grupos (sin relación con los equipos de prácticas). A cada grupo se le asignará al azar una de las arquitectecturas de software planteadoas en el caso de estudio, y deberá defender su uso durante el debate.\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:57+02:00"
    },
    {
      "path": "SE3.html",
      "title": "SE3",
      "description": "Paradigmas de arquitectura\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nIntroducción\r\nObjetivo\r\nMetodología\r\n\r\nIntroducción\r\nSeminario conjunto de las asignaturas EI1048 y EI1039, cuyo tema será “Paradigmas/Arquitecturas de software”.\r\nObjetivo\r\nReflexionar sobre el concepto de patrón de arquitectura como solución general adaptable a tareas particulares.\r\nArgumentar las ventajas e inconvenientes de patrones de arquitecturas, como base para elegir la solución más adecuada para un problema dado.\r\nContraargumentar los argumentos del otro grupo.\r\nMetodología\r\nEl seminario se articula en formato de debate entre dos grupos. Los asistentes a cada sesión de seminarios se dividirán aleatoriamente en dos grupos (sin relación con los equipos de prácticas). A cada grupo se le asignará al azar una pareja de arquitecturas al inicio de la sesión de seminario, y deberá defender su uso durante el debate. Las reglas del debate se detallan abajo, y se explicarán al principio del seminario.\r\nComo preparación para el debate, todos los alumnos deberán investigar las siguientes parejas de patrones/paradigmas de arquitectura de software:\r\nLambda Architecture y Kappa Architecture\r\nClean Architecture y Hexagonal Architecture\r\nEntre los aspectos a investigar de cada patrón debéis considerar los siguientes:\r\nNecesidad o problema general que resuelve, si es posible, apoyado por ejemplos ilustrativos de aplicaciones o plataformas comerciales actuales.\r\nPuntos fuertes o ventajas de cada patrón, y de la pareja en su conjunto, y ejemplos de escenarios de aplicación que se beneficiarían del uso del patrón.\r\nPuntos débiles o limitaciones de cada patrón, y de la pareja en conjunto, y ejemplos de escenarios de aplicación en los que no sería recomendable el uso del patrón.\r\nJustificación técnica de fortalezas y debilidades\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:58+02:00"
    },
    {
      "path": "SE5.html",
      "title": "SE5",
      "description": "\"Ensayo\" de la presentación del proyecto\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nObjetivo\r\nInstrucciones\r\n\r\nObjetivo\r\nReconocer, analizar y aplicar habilidades para una comunicación eficaz.\r\nInstrucciones\r\nLa presentación del proyecto se centra en gran medida en la competencia de comunicación oral efectiva. Por lo tanto, los criterios de evaluación de la presentación final del proyecto giran en gran medida en torno a las habilidades relacionadas con la comunicación oral de los miembros de cada equipo.\r\nEn este seminario, por cada equipo, un miembro tomará el rol de presentador para exponer oralemnte por unos cinco minutos el comienzo de la presentación final del proyecto comun. El contenido de esos cinco minutos versarán sobre los siguiente aspectos (que son un extracto de los que se pedirá para la presentación final)\r\nmotivación,\r\npropuesta básica (de partida, común para todos; valor metodológico),\r\npropuesta específica del equipo, haciendo énfasis en el valor añadido (por el equipo) con respecto a la propuesta básica (nuevas funciones, valor para el usuario, impacto en el uso de tecnologías…)\r\nAl finalizar la presentación, el resto de miembros del equipo opinará (siempre de forma constructiva y con respecto) sobre qué se ha hecho bien y qué se ha hecho menos bien en la presentación, teniendo en cuenta los siguientes aspectos:\r\nLenguaje verbal: el lenguaje utilizado debe ser acorde al dominio del tema, utilizando los términos adecuados, pronunciación clara, volumen de voz suficiente, velocidad del discurso, equilibrio discurso-diapositivas, contacto visual con la audiencia. La falta de ensayo puede llevar a cometer errores comunes como el uso excesivo de muletillas, repetición de contenidos o lectura de transparencias.\r\nTemporización: el tiempo total empleado se ajusta el tiempo previsto, el tiempo se distribuye entre los diferentes aspecto (los tres de arriba) del trabajo.\r\nExpresión corporal: el lenguaje corporal debe transmitir seguridad y convicción, manteniéndose en sintonía con el discurso, se muestra una actitud de interés, postura correcta.\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:34:59+02:00"
    },
    {
      "path": "syllabus.html",
      "title": "Syllabus",
      "description": "Esta programación temporal puede estar sujeta a cambios durante el curso.",
      "author": [],
      "contents": "\r\n\r\nSemana\r\nFecha\r\nPre (lecturas/videos)\r\nTE (viernes, 15:00-17:00)\r\nPost (homework)\r\nLA/SE (viernes, 17:00-19:00)\r\n1\r\n10-sep\r\nemail\r\nTE1 Intro asignatura y arquitectura software\r\nHomework 1 (hasta 22-sep, 23:59)\r\nNA\r\n2\r\n17-sep\r\n\r\nNA\r\n\r\nNA\r\n3\r\n24-sep\r\nVideo: What’s is POGIL? & web site IntroCS-POGIL\r\nBlog: Master Plan for becoming a Software Architect (PDF en AV)\r\nTE2 Estilos architectura software\r\nHomework 2 (hasta 29-sep, 23:59)\r\nNA\r\n4\r\n01-oct\r\nRefresca los conceptos clave de Programación Orientada a Objetos.\r\nVideo: Singleton Pattern by Okhravi (20min)\r\nTE3 Patrones creacionales: Singleton y Factory\r\nHomework 3 (hasta 6-oct, 23:59)\r\nLA1. Intro entrega #1 proyecto\r\n5\r\n08-oct\r\n“Sumérgete en los patrones de diseño”. Ficha de Adapter, Facade y Proxy\r\nVideo: Adapter Pattern by Okhravi (26 min)\r\nVideo: Facade Pattern by Okhravi (16 min)\r\nVideo: Proxy Pattern by Okharavi (35 min)\r\nTE4 Patrones estructurales: Adapter, Facade, y Proxy\r\nNo HW. En su lugar preparación SE1\r\nLA2\r\n6\r\n15-oct\r\n“Sumérgete en los patrones de diseño”. Ficha de Composite y Decorator\r\nTE5 Patrones estructurales. Composite y Decorator\r\nHomework 4 (hasta 20-oct, 23:59)\r\nLA3. Intro entrega #2 proyecto + fecha límite entrega #1\r\n7\r\n22-oct\r\n“Sumérgete en los patrones de diseño”. Ficha de Observer\r\nVideo: Observer pattern by Okhravi (49 min)\r\nTE6 Patrones de comportamiento: Observer\r\nNo HW\r\nSE1 (con EI1048). Arquitectura Software\r\n8\r\n29-oct\r\n“Sumérgete en los patrones de diseño”: Ficha de Template Method y Strategy\r\nVideo: 5 Design Patterns Every Engineer Should Know (12 min)\r\nTE7 Patrones de comportamiento: Template Method y Strategy\r\nHomework 5 (hasta 3-nov, 23:59)\r\nLA4\r\n9\r\n05-nov\r\n“Sumérgete en los patrones de diseño”: Ficha de Command y Iterator\r\nTE8 Patrones de comportamiento: Command y Iterator\r\nHomework 6 (hasta 10-nov, 23:59)\r\nLA5\r\n10\r\n12-nov\r\n\r\nNA\r\n\r\nLA6. Intro entrega #3 + fecha límite entrega #2\r\n11\r\n19-nov\r\n\r\nNA\r\n\r\nSE2. Patrones de Interfaces de Usuario\r\n12\r\n26-nov\r\n\r\nNA\r\n\r\nLA7\r\n13\r\n03-dic\r\n\r\nNA\r\n\r\nSE3. Diseño de Interfaces de Usuario\r\n14\r\n10-dic\r\n\r\nNA\r\n\r\nLA8\r\n15\r\n17-dic\r\n\r\nNA\r\n\r\nSE4. Ensayo presentación proyecto\r\n\r\n23-dic , 23:39\r\n\r\n\r\n\r\nFecha límite entrega #3\r\n\r\nene 2022\r\n\r\n\r\n\r\nPresentación proyecto\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:35:00+02:00"
    },
    {
      "path": "TE1.html",
      "title": "TE1",
      "description": "Presentación de la asignatura y logística <br/> Descripción del proyecto común <br/> Introducción a los patrones de diseño.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nOrganización clase\r\n\r\nOrganización clase\r\n[40 min] Opening: Bienvenidos a la EI1039 (y EI1048), logística y presentación de la asignatura\r\n[20 min] Presentación: Proyecto común de EI1039/EI1048, con hincapié en aspectos de la EI1039\r\nBootcamps o programas intensivos de formación IT. Los campamentos de entrenamiento de codificación son programas intensivos e inmersivos que enseñan a las personas las habilidades que necesitan para convertirse en desarrolladores de software. Por lo general, duran unos meses y cubren lenguajes de programación, algoritmos y principios de ingeniería de software.\r\nBootcamps para ingeniero de Software: 4 Geeks Academy\r\n\r\n[25 min] Presentación: Patrones de Diseño: Concepto, catálogo y principios\r\nDefinición de patrón de diseño\r\nCategorías de patrones: creacionales, estructurales, y de comportamiento\r\nPrincipios comunes a los patrones\r\n\r\n[15 min] Video: Patrones de diseño software: Repaso completo en 10 minutos (by Antonio Leiva)\r\n[10 min] Closing: Actividad 2.1\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:35:01+02:00"
    },
    {
      "path": "TE2.html",
      "title": "TE2",
      "description": "Fundamentos de arquitectura: conceptos, roles y compromisos <br/>\nFundamentos de arquitectura: características <br/>\nFundamentos de arquitectura: estilos\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nOrganización clase\r\n\r\n\r\nOrganización clase\r\n[05 min] Opening\r\n[10 min] Revisión: Actividad 2.1\r\n[25 min] Presentación: Fundamentos de arquitectura: conceptos y roles\r\nDefinición de arquitectura de software\r\nTareas de un arquitecto de software\r\nArquitecto vs diseñador/desarrollador\r\n\r\n[25 min] Presentación: Fundamentos de arquitectura: características\r\nDefinición de características de arquitectura; dimensiones (operacionales, estructurales, horizontales)\r\nIdentificación de las características relevantes para un sistema\r\nTodo en arquitectura de software tiene compromisos\r\n\r\n[25 min] Presentación: Fundamentos de arquitectura: Estilos de arquitectura\r\nEstilos monolíticos vs. distribuidos\r\n\r\n[10 min] Closing: Actividad 3.1\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:35:02+02:00"
    },
    {
      "path": "TE3.html",
      "title": "TE3 Patrones creacionales",
      "description": "Introducción a los patrones de diseño <br/> Patrones creacionales: Singleton y Factory Method.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nOrganización clase\r\n\r\n\r\nOrganización clase\r\n[05 min] Opening\r\n[30 min] Revisión: Actividad 3.1\r\n[20 min] Presentación: Principios SOLID\r\nPrincipios de diseño orientado a objetos\r\nPara escribir código mantenible, entendible y reusable\r\n\r\n[30 min] Presentación: Factory objects y Factory Method pattern\r\nFactory object (Simple Factory) facilita la creación de objetos\r\nFactory method permite la creación de familias de objetos relacionados\r\n\r\n[40 min] Closing: Actividad 3.2\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:35:03+02:00"
    },
    {
      "path": "TE5.html",
      "title": "TE5 Patrones estructurales",
      "description": "Adapter, Facade y Proxy Patterns.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nOrganización clase\r\n\r\nOrganización clase\r\n[10 min] Revisión: Seminarios\r\n[40 min] Presentación: Adapter pattern and Facade pattern\r\n[40 min] Actividad: Adapter-Facade patterns\r\n[20 min] Presentación: Proxy pattern\r\n[5 min] Closing: Actividad 6.1\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:35:05+02:00"
    },
    {
      "path": "TE6.html",
      "title": "TE6 Patrones estructurales/comportamiento",
      "description": "Composite y Decorator Patterns. <br/>\nObserver Pattern.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nOrganización clase\r\n\r\nOrganización clase\r\n[5 min] Opening\r\n[20 min] Revisión: Actividad 6.1\r\n[20 min] Presentación: Composite pattern y Decorator pattern\r\n[40 min] Actividad: Actividad 6.2\r\n[20 min] Presentación: Observer pattern\r\n[10 min] Closing:\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:35:06+02:00"
    },
    {
      "path": "TE7.html",
      "title": "TE7 Patrones de comportamiento",
      "description": "Template Method y Strategy Patterns.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nOrganización clase\r\n\r\nOrganización clase\r\n[10 min] Opening\r\n[20 min] Presentación: Template Method pattern\r\n[20 min] Actividad: Template Method-Strategy patterns\r\n[20 min] Presentación: Strategy pattern\r\n[40 min] Actividad: Template Method-Strategy patterns\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:35:07+02:00"
    },
    {
      "path": "TE8.html",
      "title": "TE8 Patrones de comportamiento",
      "description": "Command y Iterator Patterns.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nOrganización clase\r\n\r\nOrganización clase\r\n[10 min] Opening\r\n[20 min] Revisión: Actividad 7.1\r\n\r\nNingun problema con una estrategia\r\n\r\n\r\nAlgunas dificultades con dos estrategias: Diagrama UML\r\n\r\n\r\n  - Cada Strategy-ConcreteStrategy son bloques independientes. \r\n  - La seleción de estrategias se encapsula en la clase Context.\r\n\r\n[15 min] Presentación: Command pattern\r\n[20 min] Actividad: Command pattern\r\n[15 min] Presentación: Iterator pattern\r\n[30 min] Actividad: Command pattern\r\n[10 min] Closing.\r\n\r\n\r\n\r\n",
      "last_modified": "2023-09-28T18:35:08+02:00"
    }
  ],
  "collections": []
}
